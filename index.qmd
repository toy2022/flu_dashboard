---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
theme: lux
---


```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)

```


```{r}
china_outbreak_data <- outbreaks::fluH7N9_china_2013

total_cases_value <- china_outbreak_data %>% 
  nrow()

total_deaths_value <- china_outbreak_data %>% 
  filter(outcome == "Death") %>% 
  nrow()

total_hospitalizations_value <- china_outbreak_data %>% 
  filter(!is.na(date_of_hospitalisation)) %>% 
  nrow()

total_cases_province <- china_outbreak_data %>% 
  group_by(province) %>% 
  count() %>% 
  arrange(desc(n)) %>% 
  ungroup()

total_cases_province_graph <- total_cases_province %>% 
  mutate(tooltip_label = paste(province, round(n, 1),
                               sep = ":")) %>% 
  ggplot(aes(y = reorder(province, n),
         x = n,
         text = tooltip_label)) +
  geom_col(fill = "#5992d4") +
  labs(y = "", 
       x = "Number of Cases") + 
  theme(legend.position = "none") +
  theme_minimal()

province_ggplotly <- ggplotly(total_cases_province_graph, 
                              tooltip = "text")

```


```{r results='hide', message=FALSE, warning = FALSE}

### MAP OF CASES PER PROVINCE
province_summary <- china_outbreak_data %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("China")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")
```


# HOME 

## Row {height=25%}

```{r}
value_box(
  title = "Total Cases",
  value = total_cases_value,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6")
)

```

```{r}
value_box(
  title = "Total Hospitalizations",
  value = total_hospitalizations_value,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#214773")
)
```

```{r}
value_box(
  title = "Total Deaths",
  value = total_deaths_value,
  showcase = bsicons::bs_icon("file-medical"),
  theme = value_box_theme(bg = "#3f71ab")
)
```

## Row 2 {height=75%}

### {width=30%}

```{r title = "Number of Cases by Province"}
province_ggplotly
```

### {width=70%}

```{r title = "Map of Provinces by Number of Cases"}
china_map_plot_ggplotly
```


# DOWNLOAD DATA

```{r message=FALSE}

htmltools::browsable(
  tagList(
    reactable(china_outbreak_data, 
              elementId = "china_outbreak_data-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick ="Reactable.downloadDataCSV('china_outbreak_data-table')")
  )
)
```
